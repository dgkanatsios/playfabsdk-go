package admin

// This code was generated by a tool. Any changes may be overwritten

import (
    "encoding/json"

    playfab "github.com/dgkanatsios/playfabsdk-go/sdk"

    "github.com/mitchellh/mapstructure"
)

// AbortTaskInstance abort an ongoing task instance.
// https://api.playfab.com/Documentation/Admin/method/AbortTaskInstance
func AbortTaskInstance(settings *playfab.Settings, postData *AbortTaskInstanceRequestModel, developerSecretKey string) (*EmptyResponseModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/AbortTaskInstance", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &EmptyResponseModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// AddLocalizedNews update news item to include localized version
// https://api.playfab.com/Documentation/Admin/method/AddLocalizedNews
func AddLocalizedNews(settings *playfab.Settings, postData *AddLocalizedNewsRequestModel, developerSecretKey string) (*AddLocalizedNewsResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/AddLocalizedNews", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &AddLocalizedNewsResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// AddNews adds a new news item to the title's news feed
// https://api.playfab.com/Documentation/Admin/method/AddNews
func AddNews(settings *playfab.Settings, postData *AddNewsRequestModel, developerSecretKey string) (*AddNewsResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/AddNews", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &AddNewsResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// AddPlayerTag adds a given tag to a player profile. The tag's namespace is automatically generated based on the source of the tag.
// https://api.playfab.com/Documentation/Admin/method/AddPlayerTag
func AddPlayerTag(settings *playfab.Settings, postData *AddPlayerTagRequestModel, developerSecretKey string) (*AddPlayerTagResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/AddPlayerTag", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &AddPlayerTagResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// AddUserVirtualCurrency increments the specified virtual currency by the stated amount
// https://api.playfab.com/Documentation/Admin/method/AddUserVirtualCurrency
func AddUserVirtualCurrency(settings *playfab.Settings, postData *AddUserVirtualCurrencyRequestModel, developerSecretKey string) (*ModifyUserVirtualCurrencyResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/AddUserVirtualCurrency", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &ModifyUserVirtualCurrencyResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// AddVirtualCurrencyTypes adds one or more virtual currencies to the set defined for the title. Virtual Currencies have a maximum value of
// 2,147,483,647 when granted to a player. Any value over that will be discarded.
// https://api.playfab.com/Documentation/Admin/method/AddVirtualCurrencyTypes
func AddVirtualCurrencyTypes(settings *playfab.Settings, postData *AddVirtualCurrencyTypesRequestModel, developerSecretKey string) (*BlankResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/AddVirtualCurrencyTypes", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &BlankResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// BanUsers bans users by PlayFab ID with optional IP address, or MAC address for the provided game.
// https://api.playfab.com/Documentation/Admin/method/BanUsers
func BanUsers(settings *playfab.Settings, postData *BanUsersRequestModel, developerSecretKey string) (*BanUsersResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/BanUsers", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &BanUsersResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// CheckLimitedEditionItemAvailability checks the global count for the limited edition item.
// https://api.playfab.com/Documentation/Admin/method/CheckLimitedEditionItemAvailability
func CheckLimitedEditionItemAvailability(settings *playfab.Settings, postData *CheckLimitedEditionItemAvailabilityRequestModel, developerSecretKey string) (*CheckLimitedEditionItemAvailabilityResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/CheckLimitedEditionItemAvailability", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &CheckLimitedEditionItemAvailabilityResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// CreateActionsOnPlayersInSegmentTask create an ActionsOnPlayersInSegment task, which iterates through all players in a segment to execute action.
// https://api.playfab.com/Documentation/Admin/method/CreateActionsOnPlayersInSegmentTask
func CreateActionsOnPlayersInSegmentTask(settings *playfab.Settings, postData *CreateActionsOnPlayerSegmentTaskRequestModel, developerSecretKey string) (*CreateTaskResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/CreateActionsOnPlayersInSegmentTask", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &CreateTaskResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// CreateCloudScriptTask create a CloudScript task, which can run a CloudScript on a schedule.
// https://api.playfab.com/Documentation/Admin/method/CreateCloudScriptTask
func CreateCloudScriptTask(settings *playfab.Settings, postData *CreateCloudScriptTaskRequestModel, developerSecretKey string) (*CreateTaskResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/CreateCloudScriptTask", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &CreateTaskResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// CreateInsightsScheduledScalingTask create a Insights Scheduled Scaling task, which can scale Insights Performance Units on a schedule
// https://api.playfab.com/Documentation/Admin/method/CreateInsightsScheduledScalingTask
func CreateInsightsScheduledScalingTask(settings *playfab.Settings, postData *CreateInsightsScheduledScalingTaskRequestModel, developerSecretKey string) (*CreateTaskResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/CreateInsightsScheduledScalingTask", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &CreateTaskResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// CreateOpenIdConnection registers a relationship between a title and an Open ID Connect provider.
// https://api.playfab.com/Documentation/Admin/method/CreateOpenIdConnection
func CreateOpenIdConnection(settings *playfab.Settings, postData *CreateOpenIdConnectionRequestModel, developerSecretKey string) (*EmptyResponseModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/CreateOpenIdConnection", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &EmptyResponseModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// CreatePlayerSharedSecret creates a new Player Shared Secret Key. It may take up to 5 minutes for this key to become generally available after
// this API returns.
// https://api.playfab.com/Documentation/Admin/method/CreatePlayerSharedSecret
func CreatePlayerSharedSecret(settings *playfab.Settings, postData *CreatePlayerSharedSecretRequestModel, developerSecretKey string) (*CreatePlayerSharedSecretResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/CreatePlayerSharedSecret", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &CreatePlayerSharedSecretResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// CreatePlayerStatisticDefinition adds a new player statistic configuration to the title, optionally allowing the developer to specify a reset interval
// and an aggregation method.
// https://api.playfab.com/Documentation/Admin/method/CreatePlayerStatisticDefinition
func CreatePlayerStatisticDefinition(settings *playfab.Settings, postData *CreatePlayerStatisticDefinitionRequestModel, developerSecretKey string) (*CreatePlayerStatisticDefinitionResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/CreatePlayerStatisticDefinition", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &CreatePlayerStatisticDefinitionResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// CreateSegment creates a new player segment by defining the conditions on player properties. Also, create actions to target the player
// segments for a title.
// https://api.playfab.com/Documentation/Admin/method/CreateSegment
func CreateSegment(settings *playfab.Settings, postData *CreateSegmentRequestModel, developerSecretKey string) (*CreateSegmentResponseModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/CreateSegment", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &CreateSegmentResponseModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// DeleteContent delete a content file from the title. When deleting a file that does not exist, it returns success.
// https://api.playfab.com/Documentation/Admin/method/DeleteContent
func DeleteContent(settings *playfab.Settings, postData *DeleteContentRequestModel, developerSecretKey string) (*BlankResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/DeleteContent", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &BlankResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// DeleteMasterPlayerAccount removes a master player account entirely from all titles and deletes all associated data
// https://api.playfab.com/Documentation/Admin/method/DeleteMasterPlayerAccount
func DeleteMasterPlayerAccount(settings *playfab.Settings, postData *DeleteMasterPlayerAccountRequestModel, developerSecretKey string) (*DeleteMasterPlayerAccountResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/DeleteMasterPlayerAccount", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &DeleteMasterPlayerAccountResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// DeleteMembershipSubscription deletes a player's subscription
// https://api.playfab.com/Documentation/Admin/method/DeleteMembershipSubscription
func DeleteMembershipSubscription(settings *playfab.Settings, postData *DeleteMembershipSubscriptionRequestModel, developerSecretKey string) (*DeleteMembershipSubscriptionResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/DeleteMembershipSubscription", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &DeleteMembershipSubscriptionResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// DeleteOpenIdConnection removes a relationship between a title and an OpenID Connect provider.
// https://api.playfab.com/Documentation/Admin/method/DeleteOpenIdConnection
func DeleteOpenIdConnection(settings *playfab.Settings, postData *DeleteOpenIdConnectionRequestModel, developerSecretKey string) (*EmptyResponseModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/DeleteOpenIdConnection", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &EmptyResponseModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// DeletePlayer removes a user's player account from a title and deletes all associated data
// https://api.playfab.com/Documentation/Admin/method/DeletePlayer
func DeletePlayer(settings *playfab.Settings, postData *DeletePlayerRequestModel, developerSecretKey string) (*DeletePlayerResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/DeletePlayer", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &DeletePlayerResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// DeletePlayerSharedSecret deletes an existing Player Shared Secret Key. It may take up to 5 minutes for this delete to be reflected after this API
// returns.
// https://api.playfab.com/Documentation/Admin/method/DeletePlayerSharedSecret
func DeletePlayerSharedSecret(settings *playfab.Settings, postData *DeletePlayerSharedSecretRequestModel, developerSecretKey string) (*DeletePlayerSharedSecretResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/DeletePlayerSharedSecret", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &DeletePlayerSharedSecretResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// DeleteSegment deletes an existing player segment and its associated action(s) for a title.
// https://api.playfab.com/Documentation/Admin/method/DeleteSegment
func DeleteSegment(settings *playfab.Settings, postData *DeleteSegmentRequestModel, developerSecretKey string) (*DeleteSegmentsResponseModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/DeleteSegment", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &DeleteSegmentsResponseModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// DeleteStore deletes an existing virtual item store
// https://api.playfab.com/Documentation/Admin/method/DeleteStore
func DeleteStore(settings *playfab.Settings, postData *DeleteStoreRequestModel, developerSecretKey string) (*DeleteStoreResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/DeleteStore", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &DeleteStoreResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// DeleteTask delete a task.
// https://api.playfab.com/Documentation/Admin/method/DeleteTask
func DeleteTask(settings *playfab.Settings, postData *DeleteTaskRequestModel, developerSecretKey string) (*EmptyResponseModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/DeleteTask", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &EmptyResponseModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// DeleteTitle permanently deletes a title and all associated configuration
// https://api.playfab.com/Documentation/Admin/method/DeleteTitle
func DeleteTitle(settings *playfab.Settings, postData *DeleteTitleRequestModel, developerSecretKey string) (*DeleteTitleResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/DeleteTitle", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &DeleteTitleResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// DeleteTitleDataOverride deletes a specified set of title data overrides.
// https://api.playfab.com/Documentation/Admin/method/DeleteTitleDataOverride
func DeleteTitleDataOverride(settings *playfab.Settings, postData *DeleteTitleDataOverrideRequestModel, developerSecretKey string) (*DeleteTitleDataOverrideResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/DeleteTitleDataOverride", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &DeleteTitleDataOverrideResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// ExportMasterPlayerData exports all associated data of a master player account
// https://api.playfab.com/Documentation/Admin/method/ExportMasterPlayerData
func ExportMasterPlayerData(settings *playfab.Settings, postData *ExportMasterPlayerDataRequestModel, developerSecretKey string) (*ExportMasterPlayerDataResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/ExportMasterPlayerData", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &ExportMasterPlayerDataResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// ExportPlayersInSegment starts an export for the player profiles in a segment. This API creates a snapshot of all the player profiles which
// match the segment definition at the time of the API call. Profiles which change while an export is in progress will not
// be reflected in the results.
// https://api.playfab.com/Documentation/Admin/method/ExportPlayersInSegment
func ExportPlayersInSegment(settings *playfab.Settings, postData *ExportPlayersInSegmentRequestModel, developerSecretKey string) (*ExportPlayersInSegmentResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/ExportPlayersInSegment", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &ExportPlayersInSegmentResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetActionsOnPlayersInSegmentTaskInstance get information about a ActionsOnPlayersInSegment task instance.
// https://api.playfab.com/Documentation/Admin/method/GetActionsOnPlayersInSegmentTaskInstance
func GetActionsOnPlayersInSegmentTaskInstance(settings *playfab.Settings, postData *GetTaskInstanceRequestModel, developerSecretKey string) (*GetActionsOnPlayersInSegmentTaskInstanceResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetActionsOnPlayersInSegmentTaskInstance", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetActionsOnPlayersInSegmentTaskInstanceResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetAllSegments retrieves an array of player segment definitions. Results from this can be used in subsequent API calls such as
// GetPlayersInSegment which requires a Segment ID. While segment names can change the ID for that segment will not change.
// https://api.playfab.com/Documentation/Admin/method/GetAllSegments
func GetAllSegments(settings *playfab.Settings, postData *GetAllSegmentsRequestModel, developerSecretKey string) (*GetAllSegmentsResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetAllSegments", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetAllSegmentsResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetCatalogItems retrieves the specified version of the title's catalog of virtual goods, including all defined properties
// https://api.playfab.com/Documentation/Admin/method/GetCatalogItems
func GetCatalogItems(settings *playfab.Settings, postData *GetCatalogItemsRequestModel, developerSecretKey string) (*GetCatalogItemsResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetCatalogItems", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetCatalogItemsResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetCloudScriptRevision gets the contents and information of a specific Cloud Script revision.
// https://api.playfab.com/Documentation/Admin/method/GetCloudScriptRevision
func GetCloudScriptRevision(settings *playfab.Settings, postData *GetCloudScriptRevisionRequestModel, developerSecretKey string) (*GetCloudScriptRevisionResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetCloudScriptRevision", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetCloudScriptRevisionResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetCloudScriptTaskInstance get detail information about a CloudScript task instance.
// https://api.playfab.com/Documentation/Admin/method/GetCloudScriptTaskInstance
func GetCloudScriptTaskInstance(settings *playfab.Settings, postData *GetTaskInstanceRequestModel, developerSecretKey string) (*GetCloudScriptTaskInstanceResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetCloudScriptTaskInstance", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetCloudScriptTaskInstanceResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetCloudScriptVersions lists all the current cloud script versions. For each version, information about the current published and latest
// revisions is also listed.
// https://api.playfab.com/Documentation/Admin/method/GetCloudScriptVersions
func GetCloudScriptVersions(settings *playfab.Settings, postData *GetCloudScriptVersionsRequestModel, developerSecretKey string) (*GetCloudScriptVersionsResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetCloudScriptVersions", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetCloudScriptVersionsResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetContentList list all contents of the title and get statistics such as size
// https://api.playfab.com/Documentation/Admin/method/GetContentList
func GetContentList(settings *playfab.Settings, postData *GetContentListRequestModel, developerSecretKey string) (*GetContentListResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetContentList", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetContentListResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetContentUploadUrl retrieves the pre-signed URL for uploading a content file. A subsequent HTTP PUT to the returned URL uploads the
// content. Also, please be aware that the Content service is specifically PlayFab's CDN offering, for which standard CDN
// rates apply.
// https://api.playfab.com/Documentation/Admin/method/GetContentUploadUrl
func GetContentUploadUrl(settings *playfab.Settings, postData *GetContentUploadUrlRequestModel, developerSecretKey string) (*GetContentUploadUrlResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetContentUploadUrl", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetContentUploadUrlResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetDataReport retrieves a download URL for the requested report
// https://api.playfab.com/Documentation/Admin/method/GetDataReport
func GetDataReport(settings *playfab.Settings, postData *GetDataReportRequestModel, developerSecretKey string) (*GetDataReportResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetDataReport", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetDataReportResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetMatchmakerGameInfo retrieves the details for a specific completed session, including links to standard out and standard error logs
// https://api.playfab.com/Documentation/Admin/method/GetMatchmakerGameInfo
func GetMatchmakerGameInfo(settings *playfab.Settings, postData *GetMatchmakerGameInfoRequestModel, developerSecretKey string) (*GetMatchmakerGameInfoResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetMatchmakerGameInfo", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetMatchmakerGameInfoResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetMatchmakerGameModes retrieves the details of defined game modes for the specified game server executable
// https://api.playfab.com/Documentation/Admin/method/GetMatchmakerGameModes
func GetMatchmakerGameModes(settings *playfab.Settings, postData *GetMatchmakerGameModesRequestModel, developerSecretKey string) (*GetMatchmakerGameModesResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetMatchmakerGameModes", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetMatchmakerGameModesResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetPlayedTitleList get the list of titles that the player has played
// https://api.playfab.com/Documentation/Admin/method/GetPlayedTitleList
func GetPlayedTitleList(settings *playfab.Settings, postData *GetPlayedTitleListRequestModel, developerSecretKey string) (*GetPlayedTitleListResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetPlayedTitleList", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetPlayedTitleListResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetPlayerIdFromAuthToken gets a player's ID from an auth token.
// https://api.playfab.com/Documentation/Admin/method/GetPlayerIdFromAuthToken
func GetPlayerIdFromAuthToken(settings *playfab.Settings, postData *GetPlayerIdFromAuthTokenRequestModel, developerSecretKey string) (*GetPlayerIdFromAuthTokenResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetPlayerIdFromAuthToken", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetPlayerIdFromAuthTokenResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetPlayerProfile retrieves the player's profile
// https://api.playfab.com/Documentation/Admin/method/GetPlayerProfile
func GetPlayerProfile(settings *playfab.Settings, postData *GetPlayerProfileRequestModel, developerSecretKey string) (*GetPlayerProfileResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetPlayerProfile", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetPlayerProfileResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetPlayerSegments list all segments that a player currently belongs to at this moment in time.
// https://api.playfab.com/Documentation/Admin/method/GetPlayerSegments
func GetPlayerSegments(settings *playfab.Settings, postData *GetPlayersSegmentsRequestModel, developerSecretKey string) (*GetPlayerSegmentsResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetPlayerSegments", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetPlayerSegmentsResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetPlayerSharedSecrets returns all Player Shared Secret Keys including disabled and expired.
// https://api.playfab.com/Documentation/Admin/method/GetPlayerSharedSecrets
func GetPlayerSharedSecrets(settings *playfab.Settings, postData *GetPlayerSharedSecretsRequestModel, developerSecretKey string) (*GetPlayerSharedSecretsResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetPlayerSharedSecrets", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetPlayerSharedSecretsResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetPlayersInSegment allows for paging through all players in a given segment. This API creates a snapshot of all player profiles that match
// the segment definition at the time of its creation and lives through the Total Seconds to Live, refreshing its life span
// on each subsequent use of the Continuation Token. Profiles that change during the course of paging will not be reflected
// in the results. AB Test segments are currently not supported by this operation. NOTE: This API is limited to being
// called 30 times in one minute. You will be returned an error if you exceed this threshold.
// https://api.playfab.com/Documentation/Admin/method/GetPlayersInSegment
func GetPlayersInSegment(settings *playfab.Settings, postData *GetPlayersInSegmentRequestModel, developerSecretKey string) (*GetPlayersInSegmentResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetPlayersInSegment", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetPlayersInSegmentResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetPlayerStatisticDefinitions retrieves the configuration information for all player statistics defined in the title, regardless of whether they have
// a reset interval.
// https://api.playfab.com/Documentation/Admin/method/GetPlayerStatisticDefinitions
func GetPlayerStatisticDefinitions(settings *playfab.Settings, postData *GetPlayerStatisticDefinitionsRequestModel, developerSecretKey string) (*GetPlayerStatisticDefinitionsResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetPlayerStatisticDefinitions", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetPlayerStatisticDefinitionsResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetPlayerStatisticVersions retrieves the information on the available versions of the specified statistic.
// https://api.playfab.com/Documentation/Admin/method/GetPlayerStatisticVersions
func GetPlayerStatisticVersions(settings *playfab.Settings, postData *GetPlayerStatisticVersionsRequestModel, developerSecretKey string) (*GetPlayerStatisticVersionsResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetPlayerStatisticVersions", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetPlayerStatisticVersionsResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetPlayerTags get all tags with a given Namespace (optional) from a player profile.
// https://api.playfab.com/Documentation/Admin/method/GetPlayerTags
func GetPlayerTags(settings *playfab.Settings, postData *GetPlayerTagsRequestModel, developerSecretKey string) (*GetPlayerTagsResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetPlayerTags", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetPlayerTagsResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetPolicy gets the requested policy.
// https://api.playfab.com/Documentation/Admin/method/GetPolicy
func GetPolicy(settings *playfab.Settings, postData *GetPolicyRequestModel, developerSecretKey string) (*GetPolicyResponseModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetPolicy", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetPolicyResponseModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetPublisherData retrieves the key-value store of custom publisher settings
// https://api.playfab.com/Documentation/Admin/method/GetPublisherData
func GetPublisherData(settings *playfab.Settings, postData *GetPublisherDataRequestModel, developerSecretKey string) (*GetPublisherDataResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetPublisherData", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetPublisherDataResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetRandomResultTables retrieves the random drop table configuration for the title
// https://api.playfab.com/Documentation/Admin/method/GetRandomResultTables
func GetRandomResultTables(settings *playfab.Settings, postData *GetRandomResultTablesRequestModel, developerSecretKey string) (*GetRandomResultTablesResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetRandomResultTables", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetRandomResultTablesResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetSegmentExport retrieves the result of an export started by ExportPlayersInSegment API. If the ExportPlayersInSegment is successful and
// complete, this API returns the IndexUrl from which the index file can be downloaded. The index file has a list of urls
// from which the files containing the player profile data can be downloaded. Otherwise, it returns the current 'State' of
// the export
// https://api.playfab.com/Documentation/Admin/method/GetSegmentExport
func GetSegmentExport(settings *playfab.Settings, postData *GetPlayersInSegmentExportRequestModel, developerSecretKey string) (*GetPlayersInSegmentExportResponseModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetSegmentExport", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetPlayersInSegmentExportResponseModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetSegments get detail information of a segment and its associated definition(s) and action(s) for a title.
// https://api.playfab.com/Documentation/Admin/method/GetSegments
func GetSegments(settings *playfab.Settings, postData *GetSegmentsRequestModel, developerSecretKey string) (*GetSegmentsResponseModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetSegments", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetSegmentsResponseModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetStoreItems retrieves the set of items defined for the specified store, including all prices defined
// https://api.playfab.com/Documentation/Admin/method/GetStoreItems
func GetStoreItems(settings *playfab.Settings, postData *GetStoreItemsRequestModel, developerSecretKey string) (*GetStoreItemsResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetStoreItems", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetStoreItemsResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetTaskInstances query for task instances by task, status, or time range.
// https://api.playfab.com/Documentation/Admin/method/GetTaskInstances
func GetTaskInstances(settings *playfab.Settings, postData *GetTaskInstancesRequestModel, developerSecretKey string) (*GetTaskInstancesResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetTaskInstances", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetTaskInstancesResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetTasks get definition information on a specified task or all tasks within a title.
// https://api.playfab.com/Documentation/Admin/method/GetTasks
func GetTasks(settings *playfab.Settings, postData *GetTasksRequestModel, developerSecretKey string) (*GetTasksResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetTasks", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetTasksResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetTitleData retrieves the key-value store of custom title settings which can be read by the client
// https://api.playfab.com/Documentation/Admin/method/GetTitleData
func GetTitleData(settings *playfab.Settings, postData *GetTitleDataRequestModel, developerSecretKey string) (*GetTitleDataResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetTitleData", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetTitleDataResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetTitleInternalData retrieves the key-value store of custom title settings which cannot be read by the client
// https://api.playfab.com/Documentation/Admin/method/GetTitleInternalData
func GetTitleInternalData(settings *playfab.Settings, postData *GetTitleDataRequestModel, developerSecretKey string) (*GetTitleDataResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetTitleInternalData", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetTitleDataResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetUserAccountInfo retrieves the relevant details for a specified user, based upon a match against a supplied unique identifier
// https://api.playfab.com/Documentation/Admin/method/GetUserAccountInfo
func GetUserAccountInfo(settings *playfab.Settings, postData *LookupUserAccountInfoRequestModel, developerSecretKey string) (*LookupUserAccountInfoResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetUserAccountInfo", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &LookupUserAccountInfoResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetUserBans gets all bans for a user.
// https://api.playfab.com/Documentation/Admin/method/GetUserBans
func GetUserBans(settings *playfab.Settings, postData *GetUserBansRequestModel, developerSecretKey string) (*GetUserBansResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetUserBans", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetUserBansResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetUserData retrieves the title-specific custom data for the user which is readable and writable by the client
// https://api.playfab.com/Documentation/Admin/method/GetUserData
func GetUserData(settings *playfab.Settings, postData *GetUserDataRequestModel, developerSecretKey string) (*GetUserDataResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetUserData", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetUserDataResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetUserInternalData retrieves the title-specific custom data for the user which cannot be accessed by the client
// https://api.playfab.com/Documentation/Admin/method/GetUserInternalData
func GetUserInternalData(settings *playfab.Settings, postData *GetUserDataRequestModel, developerSecretKey string) (*GetUserDataResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetUserInternalData", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetUserDataResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetUserInventory retrieves the specified user's current inventory of virtual goods
// https://api.playfab.com/Documentation/Admin/method/GetUserInventory
func GetUserInventory(settings *playfab.Settings, postData *GetUserInventoryRequestModel, developerSecretKey string) (*GetUserInventoryResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetUserInventory", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetUserInventoryResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetUserPublisherData retrieves the publisher-specific custom data for the user which is readable and writable by the client
// https://api.playfab.com/Documentation/Admin/method/GetUserPublisherData
func GetUserPublisherData(settings *playfab.Settings, postData *GetUserDataRequestModel, developerSecretKey string) (*GetUserDataResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetUserPublisherData", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetUserDataResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetUserPublisherInternalData retrieves the publisher-specific custom data for the user which cannot be accessed by the client
// https://api.playfab.com/Documentation/Admin/method/GetUserPublisherInternalData
func GetUserPublisherInternalData(settings *playfab.Settings, postData *GetUserDataRequestModel, developerSecretKey string) (*GetUserDataResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetUserPublisherInternalData", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetUserDataResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetUserPublisherReadOnlyData retrieves the publisher-specific custom data for the user which can only be read by the client
// https://api.playfab.com/Documentation/Admin/method/GetUserPublisherReadOnlyData
func GetUserPublisherReadOnlyData(settings *playfab.Settings, postData *GetUserDataRequestModel, developerSecretKey string) (*GetUserDataResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetUserPublisherReadOnlyData", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetUserDataResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetUserReadOnlyData retrieves the title-specific custom data for the user which can only be read by the client
// https://api.playfab.com/Documentation/Admin/method/GetUserReadOnlyData
func GetUserReadOnlyData(settings *playfab.Settings, postData *GetUserDataRequestModel, developerSecretKey string) (*GetUserDataResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GetUserReadOnlyData", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GetUserDataResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GrantItemsToUsers adds the specified items to the specified user inventories
// https://api.playfab.com/Documentation/Admin/method/GrantItemsToUsers
func GrantItemsToUsers(settings *playfab.Settings, postData *GrantItemsToUsersRequestModel, developerSecretKey string) (*GrantItemsToUsersResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/GrantItemsToUsers", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &GrantItemsToUsersResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// IncrementLimitedEditionItemAvailability increases the global count for the given scarce resource.
// https://api.playfab.com/Documentation/Admin/method/IncrementLimitedEditionItemAvailability
func IncrementLimitedEditionItemAvailability(settings *playfab.Settings, postData *IncrementLimitedEditionItemAvailabilityRequestModel, developerSecretKey string) (*IncrementLimitedEditionItemAvailabilityResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/IncrementLimitedEditionItemAvailability", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &IncrementLimitedEditionItemAvailabilityResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// IncrementPlayerStatisticVersion resets the indicated statistic, removing all player entries for it and backing up the old values.
// https://api.playfab.com/Documentation/Admin/method/IncrementPlayerStatisticVersion
func IncrementPlayerStatisticVersion(settings *playfab.Settings, postData *IncrementPlayerStatisticVersionRequestModel, developerSecretKey string) (*IncrementPlayerStatisticVersionResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/IncrementPlayerStatisticVersion", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &IncrementPlayerStatisticVersionResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// ListOpenIdConnection retrieves a list of all Open ID Connect providers registered to a title.
// https://api.playfab.com/Documentation/Admin/method/ListOpenIdConnection
func ListOpenIdConnection(settings *playfab.Settings, postData *ListOpenIdConnectionRequestModel, developerSecretKey string) (*ListOpenIdConnectionResponseModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/ListOpenIdConnection", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &ListOpenIdConnectionResponseModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// ListVirtualCurrencyTypes retuns the list of all defined virtual currencies for the title
// https://api.playfab.com/Documentation/Admin/method/ListVirtualCurrencyTypes
func ListVirtualCurrencyTypes(settings *playfab.Settings, postData *ListVirtualCurrencyTypesRequestModel, developerSecretKey string) (*ListVirtualCurrencyTypesResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/ListVirtualCurrencyTypes", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &ListVirtualCurrencyTypesResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// ModifyServerBuild updates the build details for the specified game server executable
// https://api.playfab.com/Documentation/Admin/method/ModifyServerBuild
func ModifyServerBuild(settings *playfab.Settings, postData *ModifyServerBuildRequestModel, developerSecretKey string) (*ModifyServerBuildResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/ModifyServerBuild", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &ModifyServerBuildResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// RefundPurchase attempts to process an order refund through the original real money payment provider.
// https://api.playfab.com/Documentation/Admin/method/RefundPurchase
func RefundPurchase(settings *playfab.Settings, postData *RefundPurchaseRequestModel, developerSecretKey string) (*RefundPurchaseResponseModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/RefundPurchase", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &RefundPurchaseResponseModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// RemovePlayerTag remove a given tag from a player profile. The tag's namespace is automatically generated based on the source of the tag.
// https://api.playfab.com/Documentation/Admin/method/RemovePlayerTag
func RemovePlayerTag(settings *playfab.Settings, postData *RemovePlayerTagRequestModel, developerSecretKey string) (*RemovePlayerTagResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/RemovePlayerTag", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &RemovePlayerTagResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// RemoveVirtualCurrencyTypes removes one or more virtual currencies from the set defined for the title.
// https://api.playfab.com/Documentation/Admin/method/RemoveVirtualCurrencyTypes
func RemoveVirtualCurrencyTypes(settings *playfab.Settings, postData *RemoveVirtualCurrencyTypesRequestModel, developerSecretKey string) (*BlankResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/RemoveVirtualCurrencyTypes", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &BlankResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// ResetCharacterStatistics completely removes all statistics for the specified character, for the current game
// https://api.playfab.com/Documentation/Admin/method/ResetCharacterStatistics
func ResetCharacterStatistics(settings *playfab.Settings, postData *ResetCharacterStatisticsRequestModel, developerSecretKey string) (*ResetCharacterStatisticsResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/ResetCharacterStatistics", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &ResetCharacterStatisticsResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// ResetPassword reset a player's password for a given title.
// https://api.playfab.com/Documentation/Admin/method/ResetPassword
func ResetPassword(settings *playfab.Settings, postData *ResetPasswordRequestModel, developerSecretKey string) (*ResetPasswordResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/ResetPassword", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &ResetPasswordResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// ResetUserStatistics completely removes all statistics for the specified user, for the current game
// https://api.playfab.com/Documentation/Admin/method/ResetUserStatistics
func ResetUserStatistics(settings *playfab.Settings, postData *ResetUserStatisticsRequestModel, developerSecretKey string) (*ResetUserStatisticsResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/ResetUserStatistics", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &ResetUserStatisticsResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// ResolvePurchaseDispute attempts to resolve a dispute with the original order's payment provider.
// https://api.playfab.com/Documentation/Admin/method/ResolvePurchaseDispute
func ResolvePurchaseDispute(settings *playfab.Settings, postData *ResolvePurchaseDisputeRequestModel, developerSecretKey string) (*ResolvePurchaseDisputeResponseModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/ResolvePurchaseDispute", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &ResolvePurchaseDisputeResponseModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// RevokeAllBansForUser revoke all active bans for a user.
// https://api.playfab.com/Documentation/Admin/method/RevokeAllBansForUser
func RevokeAllBansForUser(settings *playfab.Settings, postData *RevokeAllBansForUserRequestModel, developerSecretKey string) (*RevokeAllBansForUserResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/RevokeAllBansForUser", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &RevokeAllBansForUserResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// RevokeBans revoke all active bans specified with BanId.
// https://api.playfab.com/Documentation/Admin/method/RevokeBans
func RevokeBans(settings *playfab.Settings, postData *RevokeBansRequestModel, developerSecretKey string) (*RevokeBansResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/RevokeBans", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &RevokeBansResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// RevokeInventoryItem revokes access to an item in a user's inventory
// https://api.playfab.com/Documentation/Admin/method/RevokeInventoryItem
func RevokeInventoryItem(settings *playfab.Settings, postData *RevokeInventoryItemRequestModel, developerSecretKey string) (*RevokeInventoryResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/RevokeInventoryItem", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &RevokeInventoryResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// RevokeInventoryItems revokes access for up to 25 items across multiple users and characters.
// https://api.playfab.com/Documentation/Admin/method/RevokeInventoryItems
func RevokeInventoryItems(settings *playfab.Settings, postData *RevokeInventoryItemsRequestModel, developerSecretKey string) (*RevokeInventoryItemsResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/RevokeInventoryItems", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &RevokeInventoryItemsResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// RunTask run a task immediately regardless of its schedule.
// https://api.playfab.com/Documentation/Admin/method/RunTask
func RunTask(settings *playfab.Settings, postData *RunTaskRequestModel, developerSecretKey string) (*RunTaskResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/RunTask", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &RunTaskResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// SendAccountRecoveryEmail forces an email to be sent to the registered email address for the user's account, with a link allowing the user to
// change the password.If an account recovery email template ID is provided, an email using the custom email template will
// be used.
// https://api.playfab.com/Documentation/Admin/method/SendAccountRecoveryEmail
func SendAccountRecoveryEmail(settings *playfab.Settings, postData *SendAccountRecoveryEmailRequestModel, developerSecretKey string) (*SendAccountRecoveryEmailResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/SendAccountRecoveryEmail", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &SendAccountRecoveryEmailResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// SetCatalogItems creates the catalog configuration of all virtual goods for the specified catalog version
// https://api.playfab.com/Documentation/Admin/method/SetCatalogItems
func SetCatalogItems(settings *playfab.Settings, postData *UpdateCatalogItemsRequestModel, developerSecretKey string) (*UpdateCatalogItemsResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/SetCatalogItems", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &UpdateCatalogItemsResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// SetMembershipOverride sets the override expiration for a membership subscription
// https://api.playfab.com/Documentation/Admin/method/SetMembershipOverride
func SetMembershipOverride(settings *playfab.Settings, postData *SetMembershipOverrideRequestModel, developerSecretKey string) (*SetMembershipOverrideResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/SetMembershipOverride", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &SetMembershipOverrideResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// SetPlayerSecret sets or resets the player's secret. Player secrets are used to sign API requests.
// https://api.playfab.com/Documentation/Admin/method/SetPlayerSecret
func SetPlayerSecret(settings *playfab.Settings, postData *SetPlayerSecretRequestModel, developerSecretKey string) (*SetPlayerSecretResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/SetPlayerSecret", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &SetPlayerSecretResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// SetPublishedRevision sets the currently published revision of a title Cloud Script
// https://api.playfab.com/Documentation/Admin/method/SetPublishedRevision
func SetPublishedRevision(settings *playfab.Settings, postData *SetPublishedRevisionRequestModel, developerSecretKey string) (*SetPublishedRevisionResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/SetPublishedRevision", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &SetPublishedRevisionResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// SetPublisherData updates the key-value store of custom publisher settings
// https://api.playfab.com/Documentation/Admin/method/SetPublisherData
func SetPublisherData(settings *playfab.Settings, postData *SetPublisherDataRequestModel, developerSecretKey string) (*SetPublisherDataResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/SetPublisherData", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &SetPublisherDataResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// SetStoreItems sets all the items in one virtual store
// https://api.playfab.com/Documentation/Admin/method/SetStoreItems
func SetStoreItems(settings *playfab.Settings, postData *UpdateStoreItemsRequestModel, developerSecretKey string) (*UpdateStoreItemsResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/SetStoreItems", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &UpdateStoreItemsResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// SetTitleData creates and updates the key-value store of custom title settings which can be read by the client. For example, a
// developer could choose to store values which modify the user experience, such as enemy spawn rates, weapon strengths,
// movement speeds, etc. This allows a developer to update the title without the need to create, test, and ship a new
// build.
// https://api.playfab.com/Documentation/Admin/method/SetTitleData
func SetTitleData(settings *playfab.Settings, postData *SetTitleDataRequestModel, developerSecretKey string) (*SetTitleDataResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/SetTitleData", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &SetTitleDataResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// SetTitleDataAndOverrides set and delete key-value pairs in a title data override instance.
// https://api.playfab.com/Documentation/Admin/method/SetTitleDataAndOverrides
func SetTitleDataAndOverrides(settings *playfab.Settings, postData *SetTitleDataAndOverridesRequestModel, developerSecretKey string) (*SetTitleDataAndOverridesResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/SetTitleDataAndOverrides", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &SetTitleDataAndOverridesResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// SetTitleInternalData updates the key-value store of custom title settings which cannot be read by the client. These values can be used to
// tweak settings used by game servers and Cloud Scripts without the need to update and re-deploy.
// https://api.playfab.com/Documentation/Admin/method/SetTitleInternalData
func SetTitleInternalData(settings *playfab.Settings, postData *SetTitleDataRequestModel, developerSecretKey string) (*SetTitleDataResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/SetTitleInternalData", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &SetTitleDataResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// SetupPushNotification sets the Amazon Resource Name (ARN) for iOS and Android push notifications. Documentation on the exact restrictions can
// be found at: http://docs.aws.amazon.com/sns/latest/api/API_CreatePlatformApplication.html. Currently, Amazon device
// Messaging is not supported.
// https://api.playfab.com/Documentation/Admin/method/SetupPushNotification
func SetupPushNotification(settings *playfab.Settings, postData *SetupPushNotificationRequestModel, developerSecretKey string) (*SetupPushNotificationResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/SetupPushNotification", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &SetupPushNotificationResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// SubtractUserVirtualCurrency decrements the specified virtual currency by the stated amount
// https://api.playfab.com/Documentation/Admin/method/SubtractUserVirtualCurrency
func SubtractUserVirtualCurrency(settings *playfab.Settings, postData *SubtractUserVirtualCurrencyRequestModel, developerSecretKey string) (*ModifyUserVirtualCurrencyResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/SubtractUserVirtualCurrency", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &ModifyUserVirtualCurrencyResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// UpdateBans updates information of a list of existing bans specified with Ban Ids.
// https://api.playfab.com/Documentation/Admin/method/UpdateBans
func UpdateBans(settings *playfab.Settings, postData *UpdateBansRequestModel, developerSecretKey string) (*UpdateBansResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/UpdateBans", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &UpdateBansResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// UpdateCatalogItems updates the catalog configuration for virtual goods in the specified catalog version
// https://api.playfab.com/Documentation/Admin/method/UpdateCatalogItems
func UpdateCatalogItems(settings *playfab.Settings, postData *UpdateCatalogItemsRequestModel, developerSecretKey string) (*UpdateCatalogItemsResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/UpdateCatalogItems", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &UpdateCatalogItemsResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// UpdateCloudScript creates a new Cloud Script revision and uploads source code to it. Note that at this time, only one file should be
// submitted in the revision.
// https://api.playfab.com/Documentation/Admin/method/UpdateCloudScript
func UpdateCloudScript(settings *playfab.Settings, postData *UpdateCloudScriptRequestModel, developerSecretKey string) (*UpdateCloudScriptResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/UpdateCloudScript", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &UpdateCloudScriptResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// UpdateOpenIdConnection modifies data and credentials for an existing relationship between a title and an Open ID Connect provider
// https://api.playfab.com/Documentation/Admin/method/UpdateOpenIdConnection
func UpdateOpenIdConnection(settings *playfab.Settings, postData *UpdateOpenIdConnectionRequestModel, developerSecretKey string) (*EmptyResponseModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/UpdateOpenIdConnection", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &EmptyResponseModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// UpdatePlayerSharedSecret updates a existing Player Shared Secret Key. It may take up to 5 minutes for this update to become generally available
// after this API returns.
// https://api.playfab.com/Documentation/Admin/method/UpdatePlayerSharedSecret
func UpdatePlayerSharedSecret(settings *playfab.Settings, postData *UpdatePlayerSharedSecretRequestModel, developerSecretKey string) (*UpdatePlayerSharedSecretResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/UpdatePlayerSharedSecret", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &UpdatePlayerSharedSecretResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// UpdatePlayerStatisticDefinition updates a player statistic configuration for the title, optionally allowing the developer to specify a reset interval.
// https://api.playfab.com/Documentation/Admin/method/UpdatePlayerStatisticDefinition
func UpdatePlayerStatisticDefinition(settings *playfab.Settings, postData *UpdatePlayerStatisticDefinitionRequestModel, developerSecretKey string) (*UpdatePlayerStatisticDefinitionResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/UpdatePlayerStatisticDefinition", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &UpdatePlayerStatisticDefinitionResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// UpdatePolicy changes a policy for a title
// https://api.playfab.com/Documentation/Admin/method/UpdatePolicy
func UpdatePolicy(settings *playfab.Settings, postData *UpdatePolicyRequestModel, developerSecretKey string) (*UpdatePolicyResponseModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/UpdatePolicy", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &UpdatePolicyResponseModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// UpdateRandomResultTables updates the random drop table configuration for the title
// https://api.playfab.com/Documentation/Admin/method/UpdateRandomResultTables
func UpdateRandomResultTables(settings *playfab.Settings, postData *UpdateRandomResultTablesRequestModel, developerSecretKey string) (*UpdateRandomResultTablesResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/UpdateRandomResultTables", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &UpdateRandomResultTablesResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// UpdateSegment updates an existing player segment and its associated definition(s) and action(s) for a title.
// https://api.playfab.com/Documentation/Admin/method/UpdateSegment
func UpdateSegment(settings *playfab.Settings, postData *UpdateSegmentRequestModel, developerSecretKey string) (*UpdateSegmentResponseModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/UpdateSegment", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &UpdateSegmentResponseModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// UpdateStoreItems updates an existing virtual item store with new or modified items
// https://api.playfab.com/Documentation/Admin/method/UpdateStoreItems
func UpdateStoreItems(settings *playfab.Settings, postData *UpdateStoreItemsRequestModel, developerSecretKey string) (*UpdateStoreItemsResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/UpdateStoreItems", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &UpdateStoreItemsResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// UpdateTask update an existing task.
// https://api.playfab.com/Documentation/Admin/method/UpdateTask
func UpdateTask(settings *playfab.Settings, postData *UpdateTaskRequestModel, developerSecretKey string) (*EmptyResponseModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/UpdateTask", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &EmptyResponseModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// UpdateUserData updates the title-specific custom data for the user which is readable and writable by the client
// https://api.playfab.com/Documentation/Admin/method/UpdateUserData
func UpdateUserData(settings *playfab.Settings, postData *UpdateUserDataRequestModel, developerSecretKey string) (*UpdateUserDataResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/UpdateUserData", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &UpdateUserDataResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// UpdateUserInternalData updates the title-specific custom data for the user which cannot be accessed by the client
// https://api.playfab.com/Documentation/Admin/method/UpdateUserInternalData
func UpdateUserInternalData(settings *playfab.Settings, postData *UpdateUserInternalDataRequestModel, developerSecretKey string) (*UpdateUserDataResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/UpdateUserInternalData", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &UpdateUserDataResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// UpdateUserPublisherData updates the publisher-specific custom data for the user which is readable and writable by the client
// https://api.playfab.com/Documentation/Admin/method/UpdateUserPublisherData
func UpdateUserPublisherData(settings *playfab.Settings, postData *UpdateUserDataRequestModel, developerSecretKey string) (*UpdateUserDataResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/UpdateUserPublisherData", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &UpdateUserDataResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// UpdateUserPublisherInternalData updates the publisher-specific custom data for the user which cannot be accessed by the client
// https://api.playfab.com/Documentation/Admin/method/UpdateUserPublisherInternalData
func UpdateUserPublisherInternalData(settings *playfab.Settings, postData *UpdateUserInternalDataRequestModel, developerSecretKey string) (*UpdateUserDataResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/UpdateUserPublisherInternalData", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &UpdateUserDataResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// UpdateUserPublisherReadOnlyData updates the publisher-specific custom data for the user which can only be read by the client
// https://api.playfab.com/Documentation/Admin/method/UpdateUserPublisherReadOnlyData
func UpdateUserPublisherReadOnlyData(settings *playfab.Settings, postData *UpdateUserDataRequestModel, developerSecretKey string) (*UpdateUserDataResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/UpdateUserPublisherReadOnlyData", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &UpdateUserDataResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// UpdateUserReadOnlyData updates the title-specific custom data for the user which can only be read by the client
// https://api.playfab.com/Documentation/Admin/method/UpdateUserReadOnlyData
func UpdateUserReadOnlyData(settings *playfab.Settings, postData *UpdateUserDataRequestModel, developerSecretKey string) (*UpdateUserDataResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/UpdateUserReadOnlyData", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &UpdateUserDataResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// UpdateUserTitleDisplayName updates the title specific display name for a user
// https://api.playfab.com/Documentation/Admin/method/UpdateUserTitleDisplayName
func UpdateUserTitleDisplayName(settings *playfab.Settings, postData *UpdateUserTitleDisplayNameRequestModel, developerSecretKey string) (*UpdateUserTitleDisplayNameResultModel, error) {
    if developerSecretKey == "" {
        return nil, playfab.NewCustomError("developerSecretKey should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/Admin/UpdateUserTitleDisplayName", "X-SecretKey", developerSecretKey)
    if err != nil {
        return nil, err
    }
    
    result := &UpdateUserTitleDisplayNameResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}



