package cloudscript

// This code was generated by a tool. Any changes may be overwritten

import (
    "encoding/json"

    playfab "github.com/dgkanatsios/playfabsdk-go/sdk"

    "github.com/mitchellh/mapstructure"
)

// ExecuteEntityCloudScript cloud Script is one of PlayFab's most versatile features. It allows client code to request execution of any kind of
// custom server-side functionality you can implement, and it can be used in conjunction with virtually anything.
// https://api.playfab.com/Documentation/CloudScript/method/ExecuteEntityCloudScript
func ExecuteEntityCloudScript(settings *playfab.Settings, postData *ExecuteEntityCloudScriptRequestModel, entityToken string) (*ExecuteCloudScriptResultModel, error) {
    if entityToken == "" {
        return nil, playfab.NewCustomError("entityToken should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/CloudScript/ExecuteEntityCloudScript", "X-EntityToken", entityToken)
    if err != nil {
        return nil, err
    }
    
    result := &ExecuteCloudScriptResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// ExecuteFunction cloud Script is one of PlayFab's most versatile features. It allows client code to request execution of any kind of
// custom server-side functionality you can implement, and it can be used in conjunction with virtually anything.
// https://api.playfab.com/Documentation/CloudScript/method/ExecuteFunction
func ExecuteFunction(settings *playfab.Settings, postData *ExecuteFunctionRequestModel, entityToken string) (*ExecuteFunctionResultModel, error) {
    if entityToken == "" {
        return nil, playfab.NewCustomError("entityToken should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/CloudScript/ExecuteFunction", "X-EntityToken", entityToken)
    if err != nil {
        return nil, err
    }
    
    result := &ExecuteFunctionResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// GetFunction gets registered Azure Functions for a given title id and function name.
// https://api.playfab.com/Documentation/CloudScript/method/GetFunction
func GetFunction(settings *playfab.Settings, postData *GetFunctionRequestModel, entityToken string) (*GetFunctionResultModel, error) {
    if entityToken == "" {
        return nil, playfab.NewCustomError("entityToken should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/CloudScript/GetFunction", "X-EntityToken", entityToken)
    if err != nil {
        return nil, err
    }
    
    result := &GetFunctionResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// ListFunctions lists all currently registered Azure Functions for a given title.
// https://api.playfab.com/Documentation/CloudScript/method/ListFunctions
func ListFunctions(settings *playfab.Settings, postData *ListFunctionsRequestModel, entityToken string) (*ListFunctionsResultModel, error) {
    if entityToken == "" {
        return nil, playfab.NewCustomError("entityToken should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/CloudScript/ListFunctions", "X-EntityToken", entityToken)
    if err != nil {
        return nil, err
    }
    
    result := &ListFunctionsResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// ListHttpFunctions lists all currently registered HTTP triggered Azure Functions for a given title.
// https://api.playfab.com/Documentation/CloudScript/method/ListHttpFunctions
func ListHttpFunctions(settings *playfab.Settings, postData *ListFunctionsRequestModel, entityToken string) (*ListHttpFunctionsResultModel, error) {
    if entityToken == "" {
        return nil, playfab.NewCustomError("entityToken should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/CloudScript/ListHttpFunctions", "X-EntityToken", entityToken)
    if err != nil {
        return nil, err
    }
    
    result := &ListHttpFunctionsResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// ListQueuedFunctions lists all currently registered Queue triggered Azure Functions for a given title.
// https://api.playfab.com/Documentation/CloudScript/method/ListQueuedFunctions
func ListQueuedFunctions(settings *playfab.Settings, postData *ListFunctionsRequestModel, entityToken string) (*ListQueuedFunctionsResultModel, error) {
    if entityToken == "" {
        return nil, playfab.NewCustomError("entityToken should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/CloudScript/ListQueuedFunctions", "X-EntityToken", entityToken)
    if err != nil {
        return nil, err
    }
    
    result := &ListQueuedFunctionsResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// PostFunctionResultForEntityTriggeredAction generate an entity PlayStream event for the provided function result.
// https://api.playfab.com/Documentation/CloudScript/method/PostFunctionResultForEntityTriggeredAction
func PostFunctionResultForEntityTriggeredAction(settings *playfab.Settings, postData *PostFunctionResultForEntityTriggeredActionRequestModel, entityToken string) (*EmptyResultModel, error) {
    if entityToken == "" {
        return nil, playfab.NewCustomError("entityToken should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/CloudScript/PostFunctionResultForEntityTriggeredAction", "X-EntityToken", entityToken)
    if err != nil {
        return nil, err
    }
    
    result := &EmptyResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// PostFunctionResultForFunctionExecution generate an entity PlayStream event for the provided function result.
// https://api.playfab.com/Documentation/CloudScript/method/PostFunctionResultForFunctionExecution
func PostFunctionResultForFunctionExecution(settings *playfab.Settings, postData *PostFunctionResultForFunctionExecutionRequestModel, entityToken string) (*EmptyResultModel, error) {
    if entityToken == "" {
        return nil, playfab.NewCustomError("entityToken should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/CloudScript/PostFunctionResultForFunctionExecution", "X-EntityToken", entityToken)
    if err != nil {
        return nil, err
    }
    
    result := &EmptyResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// PostFunctionResultForPlayerTriggeredAction generate a player PlayStream event for the provided function result.
// https://api.playfab.com/Documentation/CloudScript/method/PostFunctionResultForPlayerTriggeredAction
func PostFunctionResultForPlayerTriggeredAction(settings *playfab.Settings, postData *PostFunctionResultForPlayerTriggeredActionRequestModel, entityToken string) (*EmptyResultModel, error) {
    if entityToken == "" {
        return nil, playfab.NewCustomError("entityToken should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/CloudScript/PostFunctionResultForPlayerTriggeredAction", "X-EntityToken", entityToken)
    if err != nil {
        return nil, err
    }
    
    result := &EmptyResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// PostFunctionResultForScheduledTask generate a PlayStream event for the provided function result.
// https://api.playfab.com/Documentation/CloudScript/method/PostFunctionResultForScheduledTask
func PostFunctionResultForScheduledTask(settings *playfab.Settings, postData *PostFunctionResultForScheduledTaskRequestModel, entityToken string) (*EmptyResultModel, error) {
    if entityToken == "" {
        return nil, playfab.NewCustomError("entityToken should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/CloudScript/PostFunctionResultForScheduledTask", "X-EntityToken", entityToken)
    if err != nil {
        return nil, err
    }
    
    result := &EmptyResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// RegisterHttpFunction registers an HTTP triggered Azure function with a title.
// https://api.playfab.com/Documentation/CloudScript/method/RegisterHttpFunction
func RegisterHttpFunction(settings *playfab.Settings, postData *RegisterHttpFunctionRequestModel, entityToken string) (*EmptyResultModel, error) {
    if entityToken == "" {
        return nil, playfab.NewCustomError("entityToken should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/CloudScript/RegisterHttpFunction", "X-EntityToken", entityToken)
    if err != nil {
        return nil, err
    }
    
    result := &EmptyResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// RegisterQueuedFunction registers a queue triggered Azure Function with a title.
// https://api.playfab.com/Documentation/CloudScript/method/RegisterQueuedFunction
func RegisterQueuedFunction(settings *playfab.Settings, postData *RegisterQueuedFunctionRequestModel, entityToken string) (*EmptyResultModel, error) {
    if entityToken == "" {
        return nil, playfab.NewCustomError("entityToken should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/CloudScript/RegisterQueuedFunction", "X-EntityToken", entityToken)
    if err != nil {
        return nil, err
    }
    
    result := &EmptyResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}

// UnregisterFunction unregisters an Azure Function with a title.
// https://api.playfab.com/Documentation/CloudScript/method/UnregisterFunction
func UnregisterFunction(settings *playfab.Settings, postData *UnregisterFunctionRequestModel, entityToken string) (*EmptyResultModel, error) {
    if entityToken == "" {
        return nil, playfab.NewCustomError("entityToken should not be an empty string", playfab.ErrorGeneric)
    }
    b, errMarshal := json.Marshal(postData)
    if errMarshal != nil {
        return nil, playfab.NewCustomError(errMarshal.Error(), playfab.ErrorMarshal)
    }

    sourceMap, err := playfab.Request(settings, b, "/CloudScript/UnregisterFunction", "X-EntityToken", entityToken)
    if err != nil {
        return nil, err
    }
    
    result := &EmptyResultModel{}

    config := mapstructure.DecoderConfig{
        DecodeHook: playfab.StringToDateTimeHook,
        Result:     result,
    }
    
    decoder, errDecoding := mapstructure.NewDecoder(&config)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }
   
    errDecoding = decoder.Decode(sourceMap)
    if errDecoding != nil {
        return nil, playfab.NewCustomError(errDecoding.Error(), playfab.ErrorDecoding)
    }

    return result, nil
}



